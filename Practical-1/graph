 #include <iostream>
using namespace std;

    bool A[10][10];

    void initialize()
    {
        for(int i = 0;i < 10;++i)
            for(int j = 0;j < 10;++j)
                A[i][j] = false;
    }

    int main()
    {
        int x, y, nodes, edges;
        initialize();
        cin >> nodes;       
        cin >> edges;       
        for(int i = 0;i < edges;++i)
        {
            cin >> x >> y;
            A[x][y] = true;    
       }
       if(A[3][4] == true)
          cout << " There is an edge between 3 and 4 " << endl;
      else 
          cout << "There is no edge between 3 and 4”"<< endl;

      if(A[2][3] == true)
          cout << "There is an edge between 2 and 3" << endl;
      else 
          cout << "There is no edge between 2 and 3"<< endl;

      return 0;
    }
#include<bits/stdc++.h>
using namespace std;

class node{
    public:
    int data;
    node* next;

    node(int val)
    {
        data=val;
        next=NULL;
    }
};
 void InsertAtEnd(node* &head,int data)
{
    node* n=new node(data);
    if(head==NULL)
    {
        head=n;
        return;
    }
    node* temp=head;
    while(temp->next!=NULL)
    {
       temp=temp->next;
    }
    temp->next=n;
}

void print(node *head)
{
    node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<endl;
}


int main(){
    node* head=NULL;
    InsertAtEnd(head,11);
    InsertAtEnd(head,12);
    InsertAtEnd(head,13);
    InsertAtEnd(head,14);
    print(head);
}

   
// implementation of queue using array

#include <iostream>
using namespace std;
int queue[100], n = 100, front = - 1, rear = - 1;
void Insert() {
   int val;
   if (rear == n - 1)
   cout<<"Overflow"<<endl;
   else {
      if (front == - 1)
      front = 0;
      cout<<"Insert : "<<endl;
      cin>>val;
      rear++;
      queue[rear] = val;
   }
}
void Delete() {
   if (front == - 1 || front > rear) {
      cout<<" Underflow ";
      return ;
   } else {
      cout<<"deleted elements : "<< queue[front] <<endl;
      front++;;
   }
}
void Display() {
   if (front == - 1)
   cout<<"Queue is empty"<<endl;
   else {
      cout<<"elements are : ";
      for (int i = front; i <= rear; i++)
      cout<<queue[i]<<" ";
         cout<<endl;
   }
}
int main() {
   int ch;
   cout<<"1) Insert " <<endl;
   cout<<"2) Delete " <<endl;
   cout<<"3) Display "<<endl;
   cout<<"4) Exit"<<endl;
   do {
      cout<<"Enter choice: "<<endl;
      cin>>ch;
      switch (ch) {
         case 1: Insert();
         break;
         case 2: Delete();
         break;
         case 3: Display();
         break;
         case 4: cout<<"Exit"<<endl;
         break;
         default: cout<<"Invalid"<<endl;
      }
   } while(ch!=4);
   return 0;
}
// implementation of stack using array

#include <iostream>
using namespace std;
int stack[100], n=100, top=-1;

void push(int val) {
   if(top>=n-1)
   cout<<"Overflow"<<endl;
   else {
      top++;
      stack[top]=val;
   }
}

void pop() {
   if(top<=-1)
   cout<<" Underflow"<<endl;
   else {
      cout<<" popped element : "<< stack[top] <<endl;
      top--;
   }
}

void display() {
   if(top>=0) {
      cout<<" elements are:";
      for(int i=top; i>=0; i--)
      cout<<stack[i]<<" ";
      cout<<endl;
   } else
   cout<<" empty";
}

int main() {
   int ch, val;
   cout<<"choices :\n 1.push\n 2.pop\n 3.display stack\n 4.Exit\n";
   do {
      cout<<"Enter choice: "<<endl;
      cin>>ch;
      switch(ch) {
         case 1: {
            cout<<"Enter value:"<<endl;
            cin>>val;
            push(val);
            break;
         }
         case 2: {
            pop();
            break;
         }
         case 3: {
            display();
            break;
         }
         case 4: {
            cout<<"Exit"<<endl;
            break;
         }
         default: {
            cout<<"Invalid"<<endl;
         }
      }
   }while(ch!=4);
   return 0;
}

#include <iostream>
using namespace std;
class Node{
  public:
  int data;
  Node*left;
  Node*right;
  Node(int d){
    data=d;
    left=NULL;
    right=NULL;
  }
};
Node* createtree(){
  int val;
  cin>>val;
  Node*root;
  if(val==-1){
    return NULL;
  }
  root=new Node(val);
  root->left=createtree();
  root->right=createtree();
  return root;
}
void print(Node*root){
  if(root==NULL){
    return;
  }
  cout<<root->data<<" ";
  print(root->left);
  print(root->right);
}
int main()
{
    Node*root=createtree();  
    print(root);
  return 0;
}
